name: Azure Optimization Workflow Dry Run

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    environment: dev
    permissions: write-all

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          token: ${{ secrets.GH_TOKEN }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables
        run: |
          echo "CONFIG_FILE=configs/config.yaml" >> $GITHUB_ENV
          echo "AZURE_SUBSCRIPTION_ID=e9b4640d-1f1f-45fe-a543-c0ea45ac34c1" >> $GITHUB_ENV
          echo "AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "APPINSIGHTS_INSTRUMENTATIONKEY=${{ secrets.APPINSIGHTS_INSTRUMENTATIONKEY }}" >> $GITHUB_ENV
          echo "AZURE_STORAGE_ACCOUNT_NAME=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" >> $GITHUB_ENV
          echo "AZURE_STORAGE_FILE_SYSTEM_NAME=${{ secrets.AZURE_STORAGE_FILE_SYSTEM_NAME }}" >> $GITHUB_ENV
          echo "ADLS_DIRECTORY_PATH=${{ secrets.ADLS_DIRECTORY_PATH }}" >> $GITHUB_ENV
          echo "GH_TOKEN=${{ secrets.GH_TOKEN }}" >> $GITHUB_ENV

      - name: Verify environment variables
        run: |
          echo "CONFIG_FILE=$CONFIG_FILE"
          echo "AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID"
          echo "AZURE_CLIENT_ID=$AZURE_CLIENT_ID"
          echo "AZURE_TENANT_ID=$AZURE_TENANT_ID"
          echo "AZURE_CLIENT_SECRET=$AZURE_CLIENT_SECRET"
          echo "APPINSIGHTS_INSTRUMENTATIONKEY=$APPINSIGHTS_INSTRUMENTATIONKEY"
          echo "AZURE_STORAGE_ACCOUNT_NAME=$AZURE_STORAGE_ACCOUNT_NAME"
          echo "AZURE_STORAGE_FILE_SYSTEM_NAME=$AZURE_STORAGE_FILE_SYSTEM_NAME"
          echo "ADLS_DIRECTORY_PATH=$ADLS_DIRECTORY_PATH"
          echo "GH_TOKEN=$GH_TOKEN"

      - name: Run Azure Cost Optimizer in Dry Mode
        env:
          CONFIG_FILE: configs/config.yaml
          AZURE_SUBSCRIPTION_ID: e9b4640d-1f1f-45fe-a543-c0ea45ac34c1
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          APPINSIGHTS_INSTRUMENTATIONKEY: ${{ secrets.APPINSIGHTS_INSTRUMENTATIONKEY }}
          AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
          AZURE_STORAGE_FILE_SYSTEM_NAME: ${{ secrets.AZURE_STORAGE_FILE_SYSTEM_NAME }}
          ADLS_DIRECTORY_PATH: ${{ secrets.ADLS_DIRECTORY_PATH }}
        run: |
          echo "Running Python script with mode dry-run"
          python src/main.py --mode dry-run --all-subscriptions

      - name: Configure Git
        shell: pwsh
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git config --global core.autocrlf true

      - name: Create a new branch, commit changes, and create a Pull Request
        if: ${{ success() }}
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          $branchName = "azurecostoptimizer/dry-run-$((Get-Date).ToString('yyyyMMddHHmmss'))"
          git checkout -b $branchName
          if (git status --porcelain) {
            git add impacted_resources.txt
            git add cost_trend_*.png
            git commit -m "Add impacted_resources.txt and cost trend charts [skip ci]"
            git remote set-url origin https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/jamelachahbar/AzureOptimizer.git
            git push origin $branchName
            gh pr create --base main --head $branchName --title "Automated changes by Azure Optimizer" --body "This PR contains automated changes by the Azure Optimizer." --label "notification"
          } else {
            Write-Output "No changes to commit"
          }

      - name: Check and Create GitHub Issue
        id: create_issue
        run: |
          if (Test-Path -Path "./impacted_resources.txt") {
            $owner = (Get-Item -Path ./impacted_resources.txt).BaseName -replace 'impacted_resources_', ''
            Write-Output "Creating issue for owner: $owner"
            $title = "Azure Cost Optimization Results for $owner -$((Get-Date).ToString('yyyyMMddHHmmss'))"
            $issue_url = gh issue create --title "$title" --body-file "./impacted_resources.txt" --label "notification"
            Write-Output "::set-output name=issue_url::$issue_url.url"
          } else {
            Write-Output "File 'impacted_resources.txt' does not exist. Skipping issue creation."
          }
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Dispatch Custom Event
        if: steps.create_issue.outputs.issue_url
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: issue-created
          client-payload: '{"issue_url": "${{ steps.create_issue.outputs.issue_url }}"}'
